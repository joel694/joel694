import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

# Paths to dataset
DATASET_PATH = '/path/to/dataset/'  # Update this path with your dataset location
IMG_SIZE = 64  # Image resizing dimensions

# Function to load and preprocess dataset
def load_images_and_labels(dataset_path, img_size):
    images = []
    labels = []
    
    # Iterate over the dataset directory
    for label in ['cats', 'dogs']:
        folder_path = os.path.join(dataset_path, label)
        for file_name in os.listdir(folder_path):
            img_path = os.path.join(folder_path, file_name)
            img = cv2.imread(img_path, cv2.IMREAD_COLOR)
            if img is not None:
                # Resize the image to uniform size
                img = cv2.resize(img, (img_size, img_size))
                images.append(img)
                labels.append(label)
                
    return np.array(images), np.array(labels)

# Preprocess images and labels
images, labels = load_images_and_labels(DATASET_PATH, IMG_SIZE)

# Flatten the images (convert to 1D vectors)
images_flat = images.reshape(len(images), -1)

# Encode labels (cats -> 0, dogs -> 1)
le = LabelEncoder()
labels_encoded = le.fit_transform(labels)

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(images_flat, labels_encoded, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train an SVM classifier
svm_classifier = SVC(kernel='linear')
svm_classifier.fit(X_train_scaled, y_train)

# Predict on the test set
y_pred = svm_classifier.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=le.classes_))

# Plotting a few test images with predicted labels
def plot_predictions(images, true_labels, predicted_labels, num_images=6):
    plt.figure(figsize=(12, 8))
    for i in range(num_images):
        plt.subplot(2, 3, i+1)
        plt.imshow(images[i])
        plt.title(f"True: {true_labels[i]}, Predicted: {predicted_labels[i]}")
        plt.axis('off')
    plt.show()

# Randomly pick 6 test images to display
num_samples = 6
sample_images = X_test.reshape(-1, IMG_SIZE, IMG_SIZE, 3)[:num_samples]
true_sample_labels = le.inverse_transform(y_test[:num_samples])
predicted_sample_labels = le.inverse_transform(y_pred[:num_samples])

plot_predictions(sample_images, true_sample_labels, predicted_sample_labels)
